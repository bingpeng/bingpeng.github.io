(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{326:function(t,r,e){"use strict";e.r(r);var n=e(327),o=e.n(n);for(var i in n)"default"!==i&&function(t){e.d(r,t,(function(){return n[t]}))}(i);r.default=o.a},327:function(t,r){},328:function(t,r,e){},382:function(t,r,e){"use strict";var n=e(328);e.n(n).a},404:function(t,r,e){"use strict";e.d(r,"a",(function(){return n})),e.d(r,"b",(function(){return o}));var n=function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("记得最早学生信最难的不是编程，而是软件安装，一天安装不了一个软件，陷入无限的系统重装和各类包版本的尝试中。接触到conda之后这个问题有所缓解，但不同环境的整理和切换也很麻烦，特别是在HPC的环境下（使用module类工具管理软件也许是个可行的办法）。")]),t._v(" "),e("p",[t._v("按照现在IT发展趋势，推崇搞DevOps和基于容器编排技术的k8s。我感觉生信后续也要走这个路子，使用Docker进行环境管理，docker镜像通过Dockerfile构建，分析代码和Dockerfile通过git进行版本控制，使用CI进行自动化构建和测试。通过git可以同时将软件环境版本和分析代码版本管理起来，做到流程真正可复现。")]),t._v(" "),e("p",[t._v("之前生信靠perl、python或者shell串联的流程，难以快速部署到HPC，并且维护麻烦；Nextflow这类工具的出现极大简化了生信流程的构建，并且兼容容器技术和各类调度技术，看好NF作为新的生信数据流框架的发展。")]),t._v(" "),e("p",[t._v("做一些生信相关又不全是生信的笔记，方便自己以后查阅。")]),t._v(" "),e("div",{attrs:{id:"category"}},[e("p",[e("RouterLink",{attrs:{to:"/categories/集群调度工具/"}},[t._v("【调度】")])],1)]),t._v(" "),e("div",{attrs:{id:"category"}},[e("p",[e("RouterLink",{attrs:{to:"/categories/容器技术/"}},[t._v("【容器】")])],1)]),t._v(" "),e("div",{attrs:{id:"category"}},[e("p",[e("RouterLink",{attrs:{to:"/categories/nextflow/"}},[t._v("【NF】")])],1)]),t._v(" "),e("div",{attrs:{id:"tag"}},[e("p",[e("RouterLink",{attrs:{to:"/tag/"}},[t._v("【标签】")])],1)])])},o=[]},406:function(t,r,e){"use strict";e.r(r);var n=e(404),o=e(326);for(var i in o)"default"!==i&&function(t){e.d(r,t,(function(){return o[t]}))}(i);e(382);var a=e(2),u=Object(a.a)(o.default,n.a,n.b,!1,null,"12035134",null);r.default=u.exports}}]);